# SPDX-License-Identifier: GPL-2.0-or-later
#
# OpenOCD script for PUYA PY32G0 family (ARM Cortex-M0+)
#
source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

if { [info exists CHIPNAME] } {
                              set _CHIPNAME $CHIPNAME
                              } else {
                              set _CHIPNAME py32g0
                              }

                              set _ENDIAN little

                              # Work-area in RAM for flash programming (default 4 KiB)
                              if { [info exists WORKAREASIZE] } {
                              set _WORKAREASIZE $WORKAREASIZE
                              } else {
                              set _WORKAREASIZE 0x1000
}

# Allow overriding flash size
if { [info exists FLASH_SIZE] } {
set _FLASH_SIZE $FLASH_SIZE
} else {
set _FLASH_SIZE 0
}

# Default CPU TAP ID — возможно придётся уточнить по datasheet
if { [info exists CPUTAPID] } {
set _CPUTAPID $CPUTAPID
} else {
# Предположительный идентификатор (нужна проверка)
set _CPUTAPID 0x0bc11477
}

# Init SWD tap and target
swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

set _TARGETNAME $_CHIPNAME.cpu
target create $_TARGETNAME cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap

$_TARGETNAME configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# Flash bank for PY32G0 internal flash
flash bank $_CHIPNAME.flash puyaf0x 0x08000000 $_FLASH_SIZE 0 0 $_TARGETNAME

# Set adapter speed (пример: HSI после reset – 8 MHz → SWD ≤ 1 MHz)
adapter speed 100

adapter srst delay 100
reset_config srst_nogate

if {![using_hla]} {
cortex_m reset_config sysresetreq
}

# Hooks
proc py32g0_default_reset_start {} {
adapter speed 100
}

proc py32g0_default_examine_end {} {
# Возможные регистрационные настройки отладки (необходимо уточнить)
# Например, отключение watchdog при halt (адреса — условные примеры):
    mmw 0x40015804 0x00000006 0;
    mmw 0x40015808 0x00001800 0;
}

proc py32g0_default_reset_init {} {
# Configure PLL to boost clock to HSI x 6 (48 MHz)
    mww 0x40021004 0x00100000   ;# RCC_CFGR = PLLMUL[2]
    mmw 0x40021000 0x01000000 0 ;# RCC_CR[31:16] |= PLLON
    mww 0x40022000 0x00000011   ;# FLASH_ACR = PRFTBE | LATENCY[0]
    sleep 10                    ;# Wait for PLL to lock
    mmw 0x40021004 0x00000002 0 ;# RCC_CFGR |= SW[1]

# Boost JTAG frequency
adapter speed 100
}

$_TARGETNAME configure -event examine-end { py32g0_default_examine_end }
$_TARGETNAME configure -event reset-start { py32g0_default_reset_start }
$_TARGETNAME configure -event reset-init { py32g0_default_reset_init }
